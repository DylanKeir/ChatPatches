import groovy.json.JsonSlurper

plugins {
	id "fabric-loom" version "1.0-SNAPSHOT"
	id "maven-publish"
	id "com.modrinth.minotaur" version "2.+"
	id "com.matthewprenger.cursegradle" version "1.4.0"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = rootProject.archives_base_name
group = rootProject.group
version = rootProject.version
// tokens revert to empty strings set without valid keys in secrets.json
def tokens = file("secrets.json").exists() ? new JsonSlurper().parseText(file("secrets.json").text) : new JsonSlurper().parseText("{\"modrinth\": \"\", \"curseforge\": \"\"}")


repositories {
  	mavenCentral()

	maven { url "https://maven.shedaniel.me/" } // Cloth Config API
	maven { url "https://maven.terraformersmc.com/releases/" } // Mod Menu

	maven { url "https://jitpack.io" } // MixinExtras
	maven { url "https://repo.essential.gg/repository/maven-public" } // Essential
}

dependencies {
	minecraft "com.mojang:minecraft:$project.minecraft"
	mappings "net.fabricmc:yarn:$project.minecraft$project.yarn:v2"
	modImplementation "net.fabricmc:fabric-loader:$project.loader"
	modImplementation "net.fabricmc.fabric-api:fabric-api:$project.api$project.minecraft"

	include(annotationProcessor( implementation("com.github.LlamaLad7:MixinExtras:$project.mixin_extras") ))

	modApi("me.shedaniel.cloth:cloth-config-fabric:$project.cloth_config") {
        exclude(group: "net.fabricmc.fabric-api")
    }
	modImplementation "com.terraformersmc:modmenu:$project.modmenu"


	// integration files, toggleable in /random/integrations.properties
	File integrationsFile = file("./integrations/integrations.properties")

	if( integrationsFile.exists() ) {
		println "Loading dev testing integrations..."

		def integrations = new Properties(); integrationsFile.withInputStream { integrations.load(it) }
		def loaded = 0
		def all = 0

		for(integration in integrations) {
			def name = integration.toString().split("=")[0]
			def data = integration.toString().split("=")[1].split(",")
			def src = data[0].endsWith(".jar") ? "./integrations/" + data[0] : data[0]
			def enabled = data[1].equalsIgnoreCase("true")
			def func = data.size() > 2 ? data[2] : "modImplementation"


			if(enabled) {
				if( src.endsWith(".jar") && !file(src).exists() ) {

					System.err.println("Integration jar '" + src + "' doesn't exist")
					enabled = false
				} else {
					"${func}" (src.endsWith(".jar") ? files(src) : src)
					++loaded
				}
			}

			println( String.format("\t-> %s integration '%s' with '%s' %s",
				enabled ? "Loaded" : "Skipped",
				name,
				src,
				(func != "modImplementation" ? "using method '$func'" : "")
			))

			++all
		}
		println "Finished loading $loaded/$all dev testing integrations\n"
	}
}

processResources {
	inputs.property "version", version

	filesMatching("fabric.mod.json") {
		expand "version": version

		/* filter {
			it.replace("example_key", rootProject.exampleVar)
		} */
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}


publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {}
}


publish {
	tasks.publish.dependsOn(tasks.curseforge)
	tasks.publish.dependsOn(tasks.modrinth)
}

curseforge { // https://github.com/matthewprenger/CurseGradle/wiki/
	apiKey = tokens.curseforge
	project {
		id = "560042"
		releaseType = "release"
		changelogType = "markdown"
		changelog = file("latest_changelog.md")

		mainArtifact remapJar
		for(String target : rootProject.targets.split(",")) {
			addGameVersion target
		}

		relations {
			requiredDependency "fabric-api"

			optionalDependency "cloth-config"
			optionalDependency "modmenu"

			tool "no-chat-reports"

			incompatible "morechathistory"
		}

		options {
			forgeGradleIntegration = false
		}
	}
}

modrinth { // https://github.com/modrinth/minotaur#groovy
	token = tokens.modrinth
	projectId = "MOqt4Z5n"
	versionNumber = version // Will fail if Modrinth has this version already
	versionType = "release"
	uploadFile = remapJar
	gameVersions = Arrays.asList( rootProject.targets.split(",") ) // Must be an array
	loaders = Arrays.asList( rootProject.loaders.split(",") )
	changelog = file("latest_changelog.md").text

	dependencies {
		required.project "fabric-api"

		optional.project "cloth-config"
		optional.project "modmenu"

		optional.project "no-chat-reports"

		incompatible.project "morechathistory"
	}
}