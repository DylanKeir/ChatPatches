plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archivesBaseName
group = project.group
version = project.version


repositories {
  	mavenCentral()
	maven { url "https://maven.shedaniel.me/" } // cloth-config
	maven { url "https://maven.terraformersmc.com/releases/" } // modmenu
	maven { url "https://repo.spongepowered.org/maven" } // mixin and fernflower decompiler (for .mixin.out)
}

configurations {
	fernflower .extendsFrom implementation
}
sourceSets {
	fernflower {
		compileClasspath += main.output
		ext.languageVersion = 8
		ext.compatibility = '1.6'
        ext.modularityExcluded = true
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft}"
	mappings "net.fabricmc:yarn:${project.minecraft}${project.yarn}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader}"
	// fabric api
	loadFabricApi()

	// cloth-config api
	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

	// modmenu api
	modImplementation "com.terraformersmc:modmenu:${project.modmenu}"


	// nochatreports for testing integration
	modImplementation files("lib/NoChatReports-FABRIC-1.19-v1.2.3.jar")

	// FernFlower decompiler, currently spams log with tons of errors
    //fernflowerImplementation 'org.jetbrains.java.decompiler:fernflower:sponge-SNAPSHOT'
}

def loadFabricApi() {
	if( file("lib/NoChatReports-FABRIC-1.19-v1.2.3.jar") != null ) {
		dependencies.modImplementation "net.fabricmc.fabric-api:fabric-api:${project.api}${project.minecraft}"
	} else {
		dependencies {
			modImplementation fabricApi.module("fabric-command-api-v2", project.api + project.minecraft)
			modImplementation fabricApi.module("fabric-lifecycle-events-v1", project.api + project.minecraft)
			modImplementation fabricApi.module("fabric-networking-api-v1", project.api + project.minecraft)
		}
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java

			artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}