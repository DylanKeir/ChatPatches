import groovy.json.JsonSlurper

plugins {
	id "fabric-loom" version "1.4-SNAPSHOT"
	id "maven-publish"
	// todo: use https://github.com/modmuss50/mod-publish-plugin when more fleshed out
	id "com.modrinth.minotaur" version "2.+"
	id "com.matthewprenger.cursegradle" version "1.4.0"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = rootProject.archives_base_name
group = rootProject.group
version = rootProject.version
// tokens revert to empty strings when no secrets.json exists
def tokens = new JsonSlurper().parseText( file("secrets.json").exists() ? file("secrets.json").text : "{\"modrinth\": \"\", \"curseforge\": \"\"}" )
def changelogText = "Changelog could not be found... ðŸ˜¬"
def shouldPublish = project.hasProperty("shouldPublish") ? Boolean.parseBoolean(project.getProperty("shouldPublish")) : false

repositories {
  	mavenCentral()

	maven { url "https://maven.terraformersmc.com/releases/" } // Mod Menu
	maven { url "https://maven.isxander.dev/releases" } // YACL
}

dependencies {
	minecraft "com.mojang:minecraft:$project.minecraft"
	mappings "net.fabricmc:yarn:$project.minecraft$project.yarn:v2"
	modImplementation "net.fabricmc:fabric-loader:$project.loader"
	modImplementation "net.fabricmc.fabric-api:fabric-api:$project.api"

	modImplementation "com.terraformersmc:modmenu:$project.modmenu"
	modImplementation "dev.isxander.yacl:yet-another-config-lib-fabric:$project.yacl"
}

processResources {
	if(shouldPublish)
		println ">> /!\\ WARNING: shouldPublish was specified to true, unless an error occurs this WILL publish /!\\ <<"

	inputs.property "version", version

	filesMatching("fabric.mod.json") {
		expand "version": version

		/* filter {
			it.replace("example_key", rootProject.exampleVar)
		} */
	}

	File changelog = file("changelog.md")
	if( changelog.exists() ) {
		// replaces github issue numbers with links and fills out some variables
		file("changelog.md").text = changelog.text
			.replaceAll("##(\\d+)", "[#\$1](https://www.github.com/mrbuilder1961/ChatPatches/issues/\$1)")
			.replaceAll("\\\$\\{version}", version.toString())
			.replaceAll("\\\$\\{targets}", targets.replaceAll(",", ", "))
			.replaceAll("\\\$\\{loaders}", loaders.split(",").collect { it.capitalize() }.join(", "))


		// hackily gets the first changelog entry
		String newEntryTitle = "## Chat Patches `" + version + "`"
		int prevEntryIndex = file("changelog.md").text.replaceFirst(newEntryTitle, "").indexOf("## Chat Patches `") + newEntryTitle.length() - 2

		changelogText = file("changelog.md").text.substring(0, prevEntryIndex).replaceFirst("# Changelog\\s+", "")

		// considers the changelog "malformed" if it doesn't end with word character(s), whitespace, or newline(s)
		if( !changelogText.matches("(?s).*(\\s+|(\r?\n)+|\\w+)\$") ) {
			print "/!\\ Warning: /!\\ Changelog seemed malformed, this is probably caused by an invalid version (v$version)."
			if(shouldPublish) {
				print " Cancelled publishing, just in case."
				shouldPublish = false
			}
			println()
		}

		if(!shouldPublish)
			println "Using changelog text:\n>${changelogText}<"
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archives_base_name}"}
	}
}

build {
	dependsOn tasks.processResources
}


publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {}
}


publish {
	dependsOn tasks.processResources, tasks.curseforge, tasks.modrinth
}

curseforge { // https://github.com/matthewprenger/CurseGradle/wiki/
	apiKey = tokens.curseforge
	project {
		id = "560042"
		releaseType = "release"
		changelogType = "markdown"
		changelog = changelogText

		// adds Java versions, modloaders, and mc versions
		addGameVersion "Java 17"
		addGameVersion "Java 18"
		for(String target : rootProject.targets.split(","))
			addGameVersion target
		for(String loader : rootProject.loaders.split(","))
			addGameVersion loader.capitalize()

		mainArtifact remapJar

		relations {
			requiredDependency "fabric-api"
			requiredDependency "yacl"

			optionalDependency "modmenu"

			tool "no-chat-reports"

			incompatible "more-chat-history"
		}

		options {
			forgeGradleIntegration = false
			debug = !shouldPublish
		}
	}
}

modrinth { // https://github.com/modrinth/minotaur#groovy
	token = tokens.modrinth
	projectId = "MOqt4Z5n"
	versionNumber = version // Will fail if Modrinth has this version already
	versionType = "release"
	uploadFile = remapJar
	gameVersions = Arrays.asList( rootProject.targets.split(",") ) // Must be an array
	loaders = Arrays.asList( rootProject.loaders.split(",") )
	changelog = changelogText

	debugMode = !shouldPublish

	dependencies {
		required.project "fabric-api"
		required.project "yacl"

		optional.project "modmenu"
		optional.project "no-chat-reports"

		incompatible.project "morechathistory"
	}
}
