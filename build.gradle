plugins {
	id "fabric-loom" version "1.0-SNAPSHOT"
	id "maven-publish"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = rootProject.archives_base_name
group = rootProject.group
def modVersion = rootProject.version
version = "$rootProject.minecraft-$modVersion"


repositories {
  	mavenCentral()

	//maven { url "https://minecraft.guntram.de/maven/" } // CrowdinTranslate
	maven { url "https://maven.shedaniel.me/" } // Cloth Config API
	maven { url "https://maven.terraformersmc.com/releases/" } // Mod Menu

	maven { url "https://jitpack.io" } // MixinExtras
	maven { url "https://repo.essential.gg/repository/maven-public" } // MixinExtras
}

dependencies {
	minecraft "com.mojang:minecraft:$project.minecraft"
	mappings "net.fabricmc:yarn:$project.minecraft$project.yarn:v2"
	modImplementation "net.fabricmc:fabric-loader:$project.loader"
	modImplementation "net.fabricmc.fabric-api:fabric-api:$project.api$project.minecraft"

	include(annotationProcessor( implementation("com.github.LlamaLad7:MixinExtras:0.1.0") ))
	//include( modImplementation("de.guntram.mcmod:crowdin-translate:$project.crowdin") )

	modApi("me.shedaniel.cloth:cloth-config-fabric:$project.cloth_config") {
        exclude(group: "net.fabricmc.fabric-api")
    }
	modImplementation "com.terraformersmc:modmenu:$project.modmenu"


	// integration files, toggleable in /random/integrations.properties
	File integrationsFile = file("./integrations/integrations.properties")

	if( integrationsFile.exists() ) {
		println "Loading dev testing integrations..."

		def integrations = new Properties(); integrationsFile.withInputStream { integrations.load(it) }
		def loaded = 0
		def all = 0

		for(integration in integrations) {
			def name = integration.toString().split("=")[0]
			def data = integration.toString().split("=")[1].split(",")
			def src = data[0].endsWith(".jar") ? "./integrations/" + data[0] : data[0]
			def enabled = data[1].equalsIgnoreCase("true")
			def func = data.size() > 2 ? data[2] : "modImplementation"


			if(enabled) {
				if( src.endsWith(".jar") && !file(src).exists() ) {

					System.err.println("Integration jar '" + src + "' doesn't exist")
					enabled = false
				} else {
					"${func}" (src.endsWith(".jar") ? files(src) : src)
					++loaded
				}
			}

			println String.format("\t-> %s integration '%s' from '%s' %s", enabled ? "Loaded" : "Skipped", name, src, (func != "modImplementation" ? "using method '$func'" : ""))

			++all
		}
		println "Finished loading $loaded/$all dev testing integrations\n"
	}
}

processResources {
	inputs.property "version", modVersion

	filesMatching("fabric.mod.json") {
		expand "version": modVersion

		/* filter {
			it.replace("example_key", rootProject.exampleVar)
		} */
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
